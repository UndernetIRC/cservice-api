package helper

import (
	"crypto/rand"
	"errors"
	logger "log/slog"
	"math/big"
)

// GenerateSecureToken generates a cryptographically secure random token
func GenerateSecureToken(length int) string {
	str, err := CryptoRandomString(int64(length))
	if err != nil {
		logger.Error("failed to generate secure token: ", "error", err)
	}

	return str
}

// CryptoRandomInt returns a crypto random integer between 0 and limit, inclusive
// Copried from https://github.com/go-gitea/gitea/blob/main/modules/util/util.go#L59
func CryptoRandomInt(limit int64) (int64, error) {
	if limit <= 0 {
		return 0, errors.New("limit must be greater than 0")
	}
	rInt, err := rand.Int(rand.Reader, big.NewInt(limit))
	if err != nil {
		return 0, err
	}
	return rInt.Int64(), nil
}

const alphanumericalChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

// CryptoRandomString generates a crypto random alphanumerical string, each byte is generated by [0,61] range
// Copied from https://github.com/go-gitea/gitea/blob/main/modules/util/util.go#L70
func CryptoRandomString(length int64) (string, error) {
	buf := make([]byte, length)
	limit := int64(len(alphanumericalChars))
	for i := range buf {
		num, err := CryptoRandomInt(limit)
		if err != nil {
			return "", err
		}
		buf[i] = alphanumericalChars[num]
	}
	return string(buf), nil
}
