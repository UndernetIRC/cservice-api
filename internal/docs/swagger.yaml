basePath: /api/v1
definitions:
  admin.RoleCreateResponse:
    properties:
      id:
        type: integer
    type: object
  admin.RoleDataRequest:
    properties:
      description:
        maxLength: 255
        minLength: 3
        type: string
        x-order: "1"
      name:
        maxLength: 50
        minLength: 3
        type: string
        x-order: "0"
    required:
    - name
    type: object
  admin.RoleListResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/admin.RoleNameResponse'
        type: array
    type: object
  admin.RoleNameResponse:
    properties:
      description:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
    type: object
  admin.UsersRequest:
    properties:
      users:
        items:
          type: string
        type: array
    required:
    - users
    type: object
  admin.roleUpdateResponse:
    properties:
      id:
        type: integer
    type: object
  controllers.ActivateTOTPRequest:
    properties:
      otp_code:
        type: string
        x-order: "0"
    required:
    - otp_code
    type: object
  controllers.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
        x-order: "2"
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
      new_password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  controllers.ChannelSearchResult:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      member_count:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  controllers.DisableTOTPRequest:
    properties:
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
      otp_code:
        type: string
        x-order: "1"
    required:
    - current_password
    - otp_code
    type: object
  controllers.EnrollTOTPRequest:
    properties:
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
    required:
    - current_password
    type: object
  controllers.EnrollTOTPResponse:
    properties:
      qr_code_base64:
        type: string
        x-order: "0"
      secret:
        type: string
        x-order: "1"
    type: object
  controllers.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
        x-order: "0"
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
        x-order: "1"
    type: object
  controllers.PaginationInfo:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  controllers.Role:
    properties:
      description:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
    type: object
  controllers.SearchChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/controllers.ChannelSearchResult'
        type: array
      pagination:
        $ref: '#/definitions/controllers.PaginationInfo'
    type: object
  controllers.UserChannelResponse:
    properties:
      access:
        type: integer
      channel_id:
        type: integer
      last_modified:
        type: integer
      name:
        type: string
    type: object
  controllers.UserRegisterActivateRequest:
    properties:
      token:
        type: string
        x-order: "0"
    required:
    - token
    type: object
  controllers.UserRegisterActivateResponse:
    properties:
      email:
        type: string
        x-order: "1"
      username:
        type: string
        x-order: "0"
    type: object
  controllers.UserRegisterRequest:
    properties:
      aup:
        type: boolean
        x-order: "4"
      confirm_password:
        type: string
        x-order: "2"
      coppa:
        type: boolean
        x-order: "5"
      email:
        type: string
        x-order: "3"
      password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - aup
    - confirm_password
    - coppa
    - email
    - password
    - username
    type: object
  controllers.UserResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/controllers.UserChannelResponse'
        type: array
        x-order: "8"
      email:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      language_code:
        type: string
        x-order: "4"
      language_name:
        type: string
        x-order: "5"
      last_seen:
        type: integer
        x-order: "6"
      max_logins:
        type: integer
        x-order: "3"
      totp_enabled:
        type: boolean
        x-order: "7"
      username:
        type: string
        x-order: "1"
    type: object
  controllers.UserRolesResponse:
    properties:
      user:
        properties:
          id:
            type: integer
            x-order: "0"
          roles:
            items:
              $ref: '#/definitions/controllers.Role'
            type: array
            x-order: "1"
          username:
            type: string
            x-order: "1"
        type: object
        x-order: "0"
    type: object
  controllers.customError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controllers.factorRequest:
    properties:
      otp:
        type: string
      state_token:
        type: string
    required:
    - otp
    - state_token
    type: object
  controllers.loginRequest:
    properties:
      password:
        maxLength: 72
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - password
    - username
    type: object
  controllers.logoutRequest:
    properties:
      logout_all:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: ratler@undernet.org
    name: Ratler
  description: |-
    This is the API for the UnderNET Channel Service. It provides a RESTful interface for managing users, channels, and other resources. <!-- ReDoc-Inject: <security-definitions> -->
    # Authorization
    **JWT Bearer Token:** The main authorization method for the API. Needs `Authorization: Bearer <jwt-token>` HTTP header to authenticate.
    <!-- ReDoc-Inject: <security-definitions> -->
  license:
    name: MIT
    url: https://github.com/UndernetIRC/cservice-api/blob/master/LICENSE
  title: UnderNET Channel Service API
  version: "0.1"
paths:
  /activate:
    post:
      consumes:
      - application/json
      description: Activates a user account using the provided token.
      parameters:
      - description: Activate account request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRegisterActivateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserRegisterActivateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/controllers.customError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Activate user account
      tags:
      - auth
  /admin/roles:
    get:
      description: Returns a list of roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.RoleListResponse'
      security:
      - JWTBearerToken: []
      summary: List roles
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Creates a new role
      parameters:
      - description: Role data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.RoleDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin.RoleCreateResponse'
      security:
      - JWTBearerToken: []
      summary: Create role
      tags:
      - admin
  /admin/roles/{id}:
    delete:
      description: Deletes a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Delete role
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Updates a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.RoleDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.roleUpdateResponse'
      security:
      - JWTBearerToken: []
      summary: Update role
      tags:
      - admin
  /admin/roles/{id}/users:
    delete:
      consumes:
      - application/json
      description: Removes users from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of usernames
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Remove users from role
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Assigns users to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of usernames
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Assign users to role
      tags:
      - admin
  /authn/factor_verify:
    post:
      consumes:
      - application/json
      description: |-
        Verifies the user's MFA factor (OTP) and returns a JWT token if successful.
        The state token, returned from `/login` if the user has TOTP enabled, it is used in conjunction with
        the OTP (one-time password) to retrieve the actual JWT token
      parameters:
      - description: State token and OTP
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.factorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Verify MFA factor
      tags:
      - auth
  /authn/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the JWT token using the refresh token stored in the client's
        cookie.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Refresh JWT token
      tags:
      - auth
  /channels/search:
    get:
      consumes:
      - application/json
      description: Search for channels using wildcard patterns with pagination support
      parameters:
      - description: Search query (supports wildcards)
        in: query
        name: q
        required: true
        type: string
      - description: 'Maximum number of results (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SearchChannelsResponse'
        "400":
          description: Invalid query parameters
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Search channels by name
      tags:
      - channels
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Authenticates a user and returns an authentication token, which can be a JWT token or a state token.
        If the user has enabled multi-factor authentication (MFA), a state token will be returned instead of a JWT token.
        The state token is used in conjunction with the OTP (one-time password) to retrieve the actual JWT token.
        To obtain the JWT token, the state token and OTP must be sent to the `/authn/verify_factor` endpoint.
      parameters:
      - description: Login request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: |-
        Logs out the user by deleting the refresh token from the database. If `{logout_all: true}` is posted,
        all refresh tokens for the user will be deleted, invalidating all refresh tokens.
      parameters:
      - description: Logout request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.logoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged out
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      security:
      - JWTBearerToken: []
      summary: Logout
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: Register request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Register
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: Get current user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      security:
      - JWTBearerToken: []
      summary: Get current user information
      tags:
      - user
  /user/2fa/activate:
    post:
      consumes:
      - application/json
      description: Validates the OTP code and activates 2FA for the user account
      parameters:
      - description: OTP code for 2FA activation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.ActivateTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA activated successfully
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - invalid OTP code
        "409":
          description: Conflict - 2FA already enabled or not enrolled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Complete 2FA enrollment
      tags:
      - user
  /user/2fa/disable:
    post:
      consumes:
      - application/json
      description: Disables 2FA for the user account. Requires both current password
        and valid OTP code for security.
      parameters:
      - description: Password and OTP code for 2FA disabling
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.DisableTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA disabled successfully
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - incorrect password or invalid OTP
        "409":
          description: Conflict - 2FA is not enabled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Disable 2FA
      tags:
      - user
  /user/2fa/enroll:
    post:
      consumes:
      - application/json
      description: Generates a QR code and secret for TOTP 2FA enrollment. Requires
        current password for security.
      parameters:
      - description: Password confirmation for 2FA enrollment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.EnrollTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnrollTOTPResponse'
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - incorrect password
        "409":
          description: Conflict - 2FA already enabled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Start 2FA enrollment
      tags:
      - user
  /user/password:
    put:
      consumes:
      - application/json
      description: Changes the password for the currently authenticated user
      parameters:
      - description: Password change request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Bad request - validation error
          schema:
            type: string
        "401":
          description: Unauthorized - invalid current password
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Change user password
      tags:
      - user
  /users/{id}:
    get:
      description: Returns a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
      security:
      - JWTBearerToken: []
      summary: Get user data by id
      tags:
      - users
  /users/{id}/roles:
    get:
      description: Get the roles for a given user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserRolesResponse'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Get the roles for a given user
      tags:
      - users
securityDefinitions:
  JWTBearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
