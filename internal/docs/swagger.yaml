basePath: /api/v1
definitions:
  admin.APIKeyResponse:
    properties:
      created_at:
        type: integer
      created_by:
        type: integer
      description:
        type: string
      expires_at:
        type: integer
      id:
        type: integer
      last_used_at:
        type: integer
      name:
        type: string
      scopes:
        items:
          type: string
        type: array
    type: object
  admin.CreateAPIKeyRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      expires_at:
        type: integer
      name:
        maxLength: 255
        minLength: 3
        type: string
      scopes:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - name
    - scopes
    type: object
  admin.CreateAPIKeyResponse:
    properties:
      created_at:
        type: integer
      expires_at:
        type: integer
      id:
        type: integer
      key:
        description: Only shown once!
        type: string
      name:
        type: string
      scopes:
        items:
          type: string
        type: array
      warning:
        type: string
    type: object
  admin.RoleCreateResponse:
    properties:
      id:
        type: integer
    type: object
  admin.RoleDataRequest:
    properties:
      description:
        maxLength: 255
        minLength: 3
        type: string
        x-order: "1"
      name:
        maxLength: 50
        minLength: 3
        type: string
        x-order: "0"
    required:
    - name
    type: object
  admin.RoleListResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/admin.RoleNameResponse'
        type: array
    type: object
  admin.RoleNameResponse:
    properties:
      description:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
    type: object
  admin.ScopeInfo:
    properties:
      action:
        type: string
      description:
        type: string
      resource:
        type: string
      scope:
        type: string
    type: object
  admin.UpdateAPIKeyScopesRequest:
    properties:
      scopes:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - scopes
    type: object
  admin.UsersRequest:
    properties:
      users:
        items:
          type: string
        type: array
    required:
    - users
    type: object
  admin.roleUpdateResponse:
    properties:
      id:
        type: integer
    type: object
  controllers.ActivateTOTPRequest:
    properties:
      otp_code:
        type: string
        x-order: "0"
    required:
    - otp_code
    type: object
  controllers.AddMemberRequest:
    properties:
      access_level:
        maximum: 499
        minimum: 1
        type: integer
      user_id:
        type: integer
    required:
    - access_level
    - user_id
    type: object
  controllers.AddMemberResponse:
    properties:
      access_level:
        type: integer
      added_at:
        type: integer
      channel_id:
        type: integer
      message:
        type: string
      user_id:
        type: integer
    type: object
  controllers.BackupCodesResponse:
    properties:
      backup_codes:
        items:
          type: string
        type: array
        x-order: "0"
      codes_remaining:
        type: integer
        x-order: "2"
      generated_at:
        type: string
        x-order: "1"
    type: object
  controllers.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
        x-order: "2"
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
      new_password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  controllers.ChannelMembership:
    properties:
      access_level:
        type: integer
      channel_id:
        type: integer
      channel_name:
        type: string
      joined_at:
        type: integer
      member_count:
        type: integer
    type: object
  controllers.ChannelRegistrationData:
    properties:
      application_id:
        description: ID of the pending registration application
        type: integer
      channel_name:
        type: string
      status:
        description: e.g., "pending", "under_review"
        type: string
      submitted_at:
        description: When the application was submitted
        type: string
    type: object
  controllers.ChannelRegistrationRequest:
    properties:
      channel_name:
        maxLength: 255
        type: string
      description:
        maxLength: 300
        type: string
      supporters:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - channel_name
    - description
    - supporters
    type: object
  controllers.ChannelRegistrationResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ChannelRegistrationData'
      status:
        description: Always "success"
        type: string
    type: object
  controllers.ChannelSearchResult:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      member_count:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  controllers.DisableTOTPRequest:
    properties:
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
      otp_code:
        type: string
        x-order: "1"
    required:
    - current_password
    - otp_code
    type: object
  controllers.EnrollTOTPRequest:
    properties:
      current_password:
        maxLength: 72
        type: string
        x-order: "0"
    required:
    - current_password
    type: object
  controllers.EnrollTOTPResponse:
    properties:
      qr_code_base64:
        type: string
        x-order: "0"
      secret:
        type: string
        x-order: "1"
    type: object
  controllers.GetChannelSettingsResponse:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      member_count:
        type: integer
      name:
        type: string
      updated_at:
        type: integer
      url:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
        x-order: "0"
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
        x-order: "1"
    type: object
  controllers.ManagerChangeConfirmationData:
    properties:
      change_type:
        type: string
      channel_id:
        type: integer
      channel_name:
        type: string
      request_id:
        type: integer
      status:
        type: string
    type: object
  controllers.ManagerChangeConfirmationResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ManagerChangeConfirmationData'
      message:
        type: string
      status:
        type: string
    type: object
  controllers.ManagerChangeData:
    properties:
      change_type:
        type: string
        x-order: "1"
      channel_id:
        type: integer
        x-order: "0"
      duration_weeks:
        type: integer
        x-order: "3"
      expires_at:
        type: string
        x-order: "6"
      new_manager:
        type: string
        x-order: "2"
      reason:
        type: string
        x-order: "4"
      status:
        type: string
        x-order: "7"
      submitted_at:
        type: string
        x-order: "5"
    type: object
  controllers.ManagerChangeRequest:
    properties:
      change_type:
        enum:
        - temporary
        - permanent
        type: string
      duration_weeks:
        maximum: 7
        minimum: 3
        type: integer
      new_manager_username:
        maxLength: 12
        minLength: 2
        type: string
      reason:
        maxLength: 500
        minLength: 1
        type: string
    required:
    - change_type
    - new_manager_username
    - reason
    type: object
  controllers.ManagerChangeResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ManagerChangeData'
      status:
        type: string
    type: object
  controllers.ManagerChangeStatusResponse:
    properties:
      change_type:
        type: string
      channel_id:
        type: integer
      duration_weeks:
        type: integer
      expires_at:
        type: string
      new_manager:
        type: string
      reason:
        type: string
      request_id:
        type: integer
      status:
        type: string
      submitted_at:
        type: string
    type: object
  controllers.PaginationInfo:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  controllers.RegenerateBackupCodesRequest:
    properties:
      totp_code:
        type: string
        x-order: "0"
    required:
    - totp_code
    type: object
  controllers.RegenerateBackupCodesResponse:
    properties:
      backup_codes:
        items:
          type: string
        type: array
        x-order: "0"
      codes_remaining:
        type: integer
        x-order: "2"
      generated_at:
        type: string
        x-order: "1"
      message:
        type: string
        x-order: "3"
    type: object
  controllers.RemoveMemberRequest:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  controllers.RemoveMemberResponse:
    properties:
      channel_id:
        type: integer
      message:
        type: string
      removed_at:
        type: integer
      user_id:
        type: integer
    type: object
  controllers.Role:
    properties:
      description:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
    type: object
  controllers.SearchChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/controllers.ChannelSearchResult'
        type: array
      pagination:
        $ref: '#/definitions/controllers.PaginationInfo'
    type: object
  controllers.UpdateChannelSettingsRequest:
    properties:
      description:
        maxLength: 500
        type: string
      url:
        maxLength: 255
        type: string
    type: object
  controllers.UpdateChannelSettingsResponse:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: integer
      url:
        type: string
    type: object
  controllers.UserRegisterActivateRequest:
    properties:
      token:
        type: string
        x-order: "0"
    required:
    - token
    type: object
  controllers.UserRegisterActivateResponse:
    properties:
      email:
        type: string
        x-order: "1"
      username:
        type: string
        x-order: "0"
    type: object
  controllers.UserRegisterRequest:
    properties:
      aup:
        type: boolean
        x-order: "4"
      confirm_password:
        type: string
        x-order: "2"
      coppa:
        type: boolean
        x-order: "5"
      email:
        type: string
        x-order: "3"
      password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - aup
    - confirm_password
    - coppa
    - email
    - password
    - username
    type: object
  controllers.UserResponse:
    properties:
      backup_codes_generated:
        description: Whether backup codes have been generated (only shown if 2FA enabled)
        type: boolean
        x-order: "8"
      backup_codes_read:
        description: Whether backup codes have been viewed by user (only shown if
          2FA enabled)
        type: boolean
        x-order: "9"
      backup_codes_remaining:
        description: Number of remaining backup codes (only shown when warning is
          true)
        type: integer
        x-order: "10"
      backup_codes_warning:
        description: Warning flag when ≤3 backup codes remain (only shown when true)
        type: boolean
        x-order: "11"
      channels:
        items:
          $ref: '#/definitions/controllers.ChannelMembership'
        type: array
        x-order: "12"
      email:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      language_code:
        type: string
        x-order: "4"
      language_name:
        type: string
        x-order: "5"
      last_seen:
        type: integer
        x-order: "6"
      max_logins:
        type: integer
        x-order: "3"
      totp_enabled:
        description: Whether 2FA (TOTP) is enabled
        type: boolean
        x-order: "7"
      username:
        type: string
        x-order: "1"
    type: object
  controllers.UserRolesResponse:
    properties:
      user:
        properties:
          id:
            type: integer
            x-order: "0"
          roles:
            items:
              $ref: '#/definitions/controllers.Role'
            type: array
            x-order: "1"
          username:
            type: string
            x-order: "1"
        type: object
        x-order: "0"
    type: object
  controllers.factorRequest:
    properties:
      otp:
        description: '6-digit TOTP code or backup code (format: abcde-12345)'
        maxLength: 12
        minLength: 6
        type: string
        x-order: "1"
      state_token:
        description: State token from login response
        type: string
        x-order: "0"
    required:
    - otp
    - state_token
    type: object
  controllers.loginRequest:
    properties:
      password:
        maxLength: 72
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - password
    - username
    type: object
  controllers.logoutRequest:
    properties:
      logout_all:
        type: boolean
    type: object
  controllers.passwordResetRequest:
    properties:
      email:
        type: string
        x-order: "0"
    required:
    - email
    type: object
  controllers.passwordResetResponse:
    properties:
      message:
        type: string
        x-order: "0"
    type: object
  controllers.resetPasswordRequest:
    properties:
      confirm_password:
        type: string
        x-order: "2"
      new_password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
      token:
        type: string
        x-order: "0"
    required:
    - confirm_password
    - new_password
    - token
    type: object
  controllers.resetPasswordResponse:
    properties:
      message:
        type: string
        x-order: "0"
    type: object
  errors.ErrorResponse:
    properties:
      error:
        properties:
          code:
            description: Error code constant
            type: string
          details:
            description: Additional error details (validation errors, etc.)
          message:
            description: Human-readable message
            type: string
        type: object
      status:
        description: Always "error"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: ratler@undernet.org
    name: Ratler
  description: |-
    This is the API for the UnderNET Channel Service. It provides a RESTful interface for managing users, channels, and other resources. <!-- ReDoc-Inject: <security-definitions> -->
    # Authorization
    **JWT Bearer Token:** The main authorization method for the API. Needs `Authorization: Bearer <jwt-token>` HTTP header to authenticate.
    <!-- ReDoc-Inject: <security-definitions> -->
  license:
    name: MIT
    url: https://github.com/UndernetIRC/cservice-api/blob/master/LICENSE
  title: UnderNET Channel Service API
  version: "0.1"
paths:
  /activate:
    post:
      consumes:
      - application/json
      description: Activates a user account using the provided token.
      parameters:
      - description: Activate account request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRegisterActivateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserRegisterActivateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Activate user account
      tags:
      - auth
  /admin/api-keys:
    get:
      description: Returns all active API keys (without the actual key values)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin.APIKeyResponse'
            type: array
      security:
      - JWTBearerToken: []
      summary: List API keys
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Creates a new API key with specified scopes. The plain key is returned
        only once.
      parameters:
      - description: API key details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin.CreateAPIKeyResponse'
      security:
      - JWTBearerToken: []
      summary: Create new API key
      tags:
      - admin
  /admin/api-keys/{id}:
    delete:
      description: Soft-deletes an API key, making it unusable
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - JWTBearerToken: []
      summary: Delete API key
      tags:
      - admin
    get:
      description: Returns details of a specific API key (without the actual key value)
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.APIKeyResponse'
      security:
      - JWTBearerToken: []
      summary: Get API key
      tags:
      - admin
  /admin/api-keys/{id}/scopes:
    put:
      consumes:
      - application/json
      description: Updates the permission scopes for an API key
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      - description: New scopes
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateAPIKeyScopesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.APIKeyResponse'
      security:
      - JWTBearerToken: []
      summary: Update API key scopes
      tags:
      - admin
  /admin/api-keys/scopes:
    get:
      description: Returns a list of all available API scopes that can be assigned
        to API keys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin.ScopeInfo'
            type: array
      security:
      - JWTBearerToken: []
      summary: Get available API scopes
      tags:
      - admin
  /admin/roles:
    get:
      description: Returns a list of roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.RoleListResponse'
      security:
      - JWTBearerToken: []
      summary: List roles
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Creates a new role
      parameters:
      - description: Role data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.RoleDataRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin.RoleCreateResponse'
      security:
      - JWTBearerToken: []
      summary: Create role
      tags:
      - admin
  /admin/roles/{id}:
    delete:
      description: Deletes a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Delete role
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Updates a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.RoleDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.roleUpdateResponse'
      security:
      - JWTBearerToken: []
      summary: Update role
      tags:
      - admin
  /admin/roles/{id}/users:
    delete:
      consumes:
      - application/json
      description: Removes users from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of usernames
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Remove users from role
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Assigns users to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of usernames
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWTBearerToken: []
      summary: Assign users to role
      tags:
      - admin
  /authn/factor_verify:
    post:
      consumes:
      - application/json
      description: |-
        Verifies the user's MFA factor and returns a JWT token if successful.
        Accepts either a 6-digit TOTP code or a backup code (format: abcde-12345).
        The state token, returned from `/login` if the user has TOTP enabled, is used in conjunction with
        the OTP (TOTP code or backup code) to retrieve the actual JWT token.
        When a backup code is used, it is automatically consumed and cannot be reused.
      parameters:
      - description: State token and OTP
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.factorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Verify MFA factor
      tags:
      - auth
  /authn/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the JWT token using the refresh token stored in the client's
        cookie.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /channels:
    post:
      consumes:
      - application/json
      description: Submit a new IRC channel registration application with validation
        and business rule enforcement
      parameters:
      - description: Channel registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ChannelRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.ChannelRegistrationResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Authorization information is missing or invalid
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: User is restricted from registering channels
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Channel name already exists or user has pending registration
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "422":
          description: Validation failed
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "429":
          description: Cooldown period active
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - JWTBearerToken: []
      summary: Submit a channel registration application
      tags:
      - channels
  /channels/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve current channel settings including description, URL, and
        member count
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetChannelSettingsResponse'
        "400":
          description: Invalid channel ID
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions to view channel
          schema:
            type: string
        "404":
          description: Channel not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Get channel settings
      tags:
      - channels
    put:
      consumes:
      - application/json
      description: Update channel description and URL with proper validation and access
        control
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Channel settings to update
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateChannelSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateChannelSettingsResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions to update channel
          schema:
            type: string
        "404":
          description: Channel not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Update channel settings
      tags:
      - channels
  /channels/{id}/manager-change:
    post:
      consumes:
      - application/json
      description: Submit a request to change channel management (temporary or permanent)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Manager change request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ManagerChangeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.ManagerChangeResponse'
        "400":
          description: Invalid request data or validation failure
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions or business rule violation
          schema:
            type: string
        "409":
          description: Conflicting pending request exists
          schema:
            type: string
        "429":
          description: User in cooldown period
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Submit a manager change request
      tags:
      - channels
  /channels/{id}/manager-change-status:
    get:
      consumes:
      - application/json
      description: Check the status of pending manager change requests for a channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ManagerChangeStatusResponse'
        "400":
          description: Invalid channel ID
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions to view status
          schema:
            type: string
        "404":
          description: No pending requests found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Get manager change request status
      tags:
      - channels
  /channels/{id}/manager-confirm:
    get:
      consumes:
      - application/json
      description: Confirm a manager change request using the token from the confirmation
        email
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Confirmation token from email
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ManagerChangeConfirmationResponse'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Channel or token not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Confirm a manager change request
      tags:
      - channels
  /channels/{id}/members:
    delete:
      consumes:
      - application/json
      description: Remove a member from a channel with proper validation and access
        control
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Member removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RemoveMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.RemoveMemberResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions
          schema:
            type: string
        "404":
          description: Channel or user not found
          schema:
            type: string
        "409":
          description: Cannot remove the last channel owner
          schema:
            type: string
        "422":
          description: Cannot remove user with access level higher than or equal to
            your own
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Remove a member from a channel
      tags:
      - channels
    post:
      consumes:
      - application/json
      description: Add a new member to a channel with specified access level and proper
        validation
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Member addition request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.AddMemberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AddMemberResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "403":
          description: Insufficient permissions
          schema:
            type: string
        "404":
          description: Channel or user not found
          schema:
            type: string
        "409":
          description: User is already a member of this channel
          schema:
            type: string
        "422":
          description: Cannot add user with access level higher than or equal to your
            own
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Add a member to a channel
      tags:
      - channels
  /channels/search:
    get:
      consumes:
      - application/json
      description: Search for channels using wildcard patterns with pagination support
      parameters:
      - description: Search query (supports wildcards)
        in: query
        name: q
        required: true
        type: string
      - description: 'Maximum number of results (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SearchChannelsResponse'
        "400":
          description: Invalid query parameters
          schema:
            type: string
        "401":
          description: Authorization information is missing or invalid
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Search channels by name
      tags:
      - channels
  /forgot-password:
    post:
      consumes:
      - application/json
      description: |-
        Initiates a password reset process by sending a reset link to the user's email address.
        This endpoint always returns 200 OK regardless of whether the email exists to prevent email enumeration attacks.
        If the email exists in the system, a password reset email will be sent.
      parameters:
      - description: Password reset request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.passwordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.passwordResetResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Request Password Reset
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Authenticates a user and returns an authentication token, which can be a JWT token or a state token.
        If the user has enabled multi-factor authentication (MFA), a state token will be returned instead of a JWT token.
        The state token is used in conjunction with the OTP (one-time password) to retrieve the actual JWT token.
        To obtain the JWT token, the state token and OTP must be sent to the `/authn/verify_factor` endpoint.
      parameters:
      - description: Login request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: |-
        Logs out the user by deleting the refresh token from the database. If `{logout_all: true}` is posted,
        all refresh tokens for the user will be deleted, invalidating all refresh tokens.
      parameters:
      - description: Logout request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.logoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged out
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - JWTBearerToken: []
      summary: Logout
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: Register request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Register
      tags:
      - auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: |-
        Resets a user's password using a valid password reset token received via email.
        The token must be valid, not expired, and not previously used.
      parameters:
      - description: Password reset data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.resetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.resetPasswordResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Reset Password
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: |-
        Get current user information with detailed channel membership data and backup code status
        Performance: Uses optimized single-query approach to avoid N+1 problems
        Backup code status is only checked if 2FA (TOTP) is enabled
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      security:
      - JWTBearerToken: []
      summary: Get current user information
      tags:
      - user
  /user/2fa/activate:
    post:
      consumes:
      - application/json
      description: Validates the OTP code and activates 2FA for the user account
      parameters:
      - description: OTP code for 2FA activation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.ActivateTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA activated successfully
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - invalid OTP code
        "409":
          description: Conflict - 2FA already enabled or not enrolled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Complete 2FA enrollment
      tags:
      - user
  /user/2fa/disable:
    post:
      consumes:
      - application/json
      description: Disables 2FA for the user account. Requires both current password
        and valid OTP code for security.
      parameters:
      - description: Password and OTP code for 2FA disabling
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.DisableTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA disabled successfully
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - incorrect password or invalid OTP
        "409":
          description: Conflict - 2FA is not enabled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Disable 2FA
      tags:
      - user
  /user/2fa/enroll:
    post:
      consumes:
      - application/json
      description: Generates a QR code and secret for TOTP 2FA enrollment. Requires
        current password for security.
      parameters:
      - description: Password confirmation for 2FA enrollment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.EnrollTOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnrollTOTPResponse'
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - incorrect password
        "409":
          description: Conflict - 2FA already enabled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Start 2FA enrollment
      tags:
      - user
  /user/backup-codes:
    get:
      consumes:
      - application/json
      description: Retrieves the user's unread backup codes. Codes are only returned
        once and must not have been viewed previously.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.BackupCodesResponse'
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - backup codes already read
        "404":
          description: Not found - no backup codes generated
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Get backup codes
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Generates new backup codes, completely replacing any existing ones.
        Requires valid TOTP code for security verification.
      parameters:
      - description: TOTP code for verification
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.RegenerateBackupCodesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.RegenerateBackupCodesResponse'
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized - missing or invalid token
        "403":
          description: Forbidden - invalid TOTP code or 2FA not enabled
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Regenerate backup codes
      tags:
      - user
  /user/backup-codes/mark-read:
    put:
      consumes:
      - application/json
      description: Marks the user's backup codes as read without retrieving them.
        This is an idempotent operation.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Not found - no backup codes generated
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Mark backup codes as read
      tags:
      - user
  /user/password:
    put:
      consumes:
      - application/json
      description: Changes the password for the currently authenticated user
      parameters:
      - description: Password change request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Bad request - validation error
          schema:
            type: string
        "401":
          description: Unauthorized - invalid current password
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Change user password
      tags:
      - user
  /users/{id}:
    get:
      description: Returns a user by id with detailed channel membership information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
      security:
      - JWTBearerToken: []
      summary: Get user data by id
      tags:
      - users
  /users/{id}/channels:
    get:
      description: Returns detailed channel membership information for a user including
        member counts
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.ChannelMembership'
            type: array
        "400":
          description: Invalid user ID
        "500":
          description: Internal server error
      security:
      - JWTBearerToken: []
      summary: Get user's channel memberships
      tags:
      - users
  /users/{id}/roles:
    get:
      description: Get the roles for a given user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserRolesResponse'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTBearerToken: []
      summary: Get the roles for a given user
      tags:
      - users
securityDefinitions:
  JWTBearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
