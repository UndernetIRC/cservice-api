{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the UnderNET Channel Service. It provides a RESTful interface for managing users, channels, and other resources. \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\n# Authorization\n**JWT Bearer Token:** The main authorization method for the API. Needs `Authorization: Bearer \u003cjwt-token\u003e` HTTP header to authenticate.\n\u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e",
        "title": "UnderNET Channel Service API",
        "contact": {
            "name": "Ratler",
            "email": "ratler@undernet.org"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/UndernetIRC/cservice-api/blob/master/LICENSE"
        },
        "version": "0.1"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/activate": {
            "post": {
                "description": "Activates a user account using the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "description": "Activate account request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserRegisterActivateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserRegisterActivateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/api-keys": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns all active API keys (without the actual key values)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List API keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin.APIKeyResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Creates a new API key with specified scopes. The plain key is returned only once.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create new API key",
                "parameters": [
                    {
                        "description": "API key details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/admin.CreateAPIKeyResponse"
                        }
                    }
                }
            }
        },
        "/admin/api-keys/scopes": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns a list of all available API scopes that can be assigned to API keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get available API scopes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/admin.ScopeInfo"
                            }
                        }
                    }
                }
            }
        },
        "/admin/api-keys/{id}": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns details of a specific API key (without the actual key value)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get API key",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.APIKeyResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Soft-deletes an API key, making it unusable",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete API key",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/admin/api-keys/{id}/scopes": {
            "put": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Updates the permission scopes for an API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update API key scopes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New scopes",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UpdateAPIKeyScopesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.APIKeyResponse"
                        }
                    }
                }
            }
        },
        "/admin/roles": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns a list of roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.RoleListResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Creates a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create role",
                "parameters": [
                    {
                        "description": "Role data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RoleDataRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/admin.RoleCreateResponse"
                        }
                    }
                }
            }
        },
        "/admin/roles/{id}": {
            "put": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Updates a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RoleDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.roleUpdateResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Deletes a role",
                "tags": [
                    "admin"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/admin/roles/{id}/users": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Assigns users to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Assign users to role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List of usernames",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Removes users from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Remove users from role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List of usernames",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/authn/factor_verify": {
            "post": {
                "description": "Verifies the user's MFA factor and returns a JWT token if successful.\nAccepts either a 6-digit TOTP code or a backup code (format: abcde-12345).\nThe state token, returned from `/login` if the user has TOTP enabled, is used in conjunction with\nthe OTP (TOTP code or backup code) to retrieve the actual JWT token.\nWhen a backup code is used, it is automatically consumed and cannot be reused.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify MFA factor",
                "parameters": [
                    {
                        "description": "State token and OTP",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.factorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/authn/refresh": {
            "post": {
                "description": "Refreshes the JWT token using the refresh token stored in the client's cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh JWT token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channels": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Submit a new IRC channel registration application with validation and business rule enforcement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Submit a channel registration application",
                "parameters": [
                    {
                        "description": "Channel registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChannelRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.ChannelRegistrationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is restricted from registering channels",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Channel name already exists or user has pending registration",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Cooldown period active",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channels/search": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Search for channels using wildcard patterns with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Search channels by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (supports wildcards)",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of results (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.SearchChannelsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/channels/{id}": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Retrieve current channel settings including description, URL, and member count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get channel settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetChannelSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions to view channel",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Update channel description and URL with proper validation and access control",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Update channel settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Channel settings to update",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateChannelSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateChannelSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions to update channel",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Channel not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/channels/{id}/manager-change": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Submit a request to change channel management (temporary or permanent)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Submit a manager change request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Manager change request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ManagerChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.ManagerChangeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or validation failure",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions or business rule violation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflicting pending request exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "429": {
                        "description": "User in cooldown period",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/channels/{id}/manager-change-status": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Check the status of pending manager change requests for a channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get manager change request status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ManagerChangeStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid channel ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions to view status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No pending requests found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/channels/{id}/manager-confirm": {
            "get": {
                "description": "Confirm a manager change request using the token from the confirmation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Confirm a manager change request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Confirmation token from email",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ManagerChangeConfirmationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Channel or token not found",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channels/{id}/members": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Add a new member to a channel with specified access level and proper validation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Add a member to a channel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member addition request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.AddMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.AddMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Channel or user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User is already a member of this channel",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Cannot add user with access level higher than or equal to your own",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Remove a member from a channel with proper validation and access control",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Remove a member from a channel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Channel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member removal request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RemoveMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.RemoveMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Channel or user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Cannot remove the last channel owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Cannot remove user with access level higher than or equal to your own",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "description": "Initiates a password reset process by sending a reset link to the user's email address.\nThis endpoint always returns 200 OK regardless of whether the email exists to prevent email enumeration attacks.\nIf the email exists in the system, a password reset email will be sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request Password Reset",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.passwordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.passwordResetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates a user and returns an authentication token, which can be a JWT token or a state token.\nIf the user has enabled multi-factor authentication (MFA), a state token will be returned instead of a JWT token.\nThe state token is used in conjunction with the OTP (one-time password) to retrieve the actual JWT token.\nTo obtain the JWT token, the state token and OTP must be sent to the `/authn/verify_factor` endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid username or password",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Logs out the user by deleting the refresh token from the database. If `{logout_all: true}` is posted,\nall refresh tokens for the user will be deleted, invalidating all refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "Logout request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.logoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Resets a user's password using a valid password reset token received via email.\nThe token must be valid, not expired, and not previously used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Password reset data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.resetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.resetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Get current user information with detailed channel membership data and backup code status\nPerformance: Uses optimized single-query approach to avoid N+1 problems\nBackup code status is only checked if 2FA (TOTP) is enabled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/user/2fa/activate": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Validates the OTP code and activates 2FA for the user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Complete 2FA enrollment",
                "parameters": [
                    {
                        "description": "OTP code for 2FA activation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ActivateTOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "2FA activated successfully"
                    },
                    "400": {
                        "description": "Bad request - validation failed"
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden - invalid OTP code"
                    },
                    "409": {
                        "description": "Conflict - 2FA already enabled or not enrolled"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/2fa/disable": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Disables 2FA for the user account. Requires both current password and valid OTP code for security.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Disable 2FA",
                "parameters": [
                    {
                        "description": "Password and OTP code for 2FA disabling",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DisableTOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "2FA disabled successfully"
                    },
                    "400": {
                        "description": "Bad request - validation failed"
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden - incorrect password or invalid OTP"
                    },
                    "409": {
                        "description": "Conflict - 2FA is not enabled"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/2fa/enroll": {
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Generates a QR code and secret for TOTP 2FA enrollment. Requires current password for security.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Start 2FA enrollment",
                "parameters": [
                    {
                        "description": "Password confirmation for 2FA enrollment",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.EnrollTOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.EnrollTOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed"
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden - incorrect password"
                    },
                    "409": {
                        "description": "Conflict - 2FA already enabled"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/backup-codes": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Retrieves the user's unread backup codes. Codes are only returned once and must not have been viewed previously.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get backup codes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.BackupCodesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden - backup codes already read"
                    },
                    "404": {
                        "description": "Not found - no backup codes generated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Generates new backup codes, completely replacing any existing ones. Requires valid TOTP code for security verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Regenerate backup codes",
                "parameters": [
                    {
                        "description": "TOTP code for verification",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegenerateBackupCodesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.RegenerateBackupCodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed"
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden - invalid TOTP code or 2FA not enabled"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/backup-codes/mark-read": {
            "put": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Marks the user's backup codes as read without retrieving them. This is an idempotent operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Mark backup codes as read",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token"
                    },
                    "404": {
                        "description": "Not found - no backup codes generated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/password": {
            "put": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Changes the password for the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid current password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns a user by id with detailed channel membership information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user data by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/channels": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Returns detailed channel membership information for a user including member counts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's channel memberships",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.ChannelMembership"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/roles": {
            "get": {
                "security": [
                    {
                        "JWTBearerToken": []
                    }
                ],
                "description": "Get the roles for a given user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the roles for a given user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserRolesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.APIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "last_used_at": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "admin.CreateAPIKeyRequest": {
            "type": "object",
            "required": [
                "name",
                "scopes"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "expires_at": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "scopes": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "admin.CreateAPIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "expires_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "key": {
                    "description": "Only shown once!",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "warning": {
                    "type": "string"
                }
            }
        },
        "admin.RoleCreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "admin.RoleDataRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "x-order": "0"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3,
                    "x-order": "1"
                }
            }
        },
        "admin.RoleListResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin.RoleNameResponse"
                    }
                }
            }
        },
        "admin.RoleNameResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "description": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        },
        "admin.ScopeInfo": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            }
        },
        "admin.UpdateAPIKeyScopesRequest": {
            "type": "object",
            "required": [
                "scopes"
            ],
            "properties": {
                "scopes": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "admin.UsersRequest": {
            "type": "object",
            "required": [
                "users"
            ],
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "admin.roleUpdateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "controllers.ActivateTOTPRequest": {
            "type": "object",
            "required": [
                "otp_code"
            ],
            "properties": {
                "otp_code": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "controllers.AddMemberRequest": {
            "type": "object",
            "required": [
                "access_level",
                "user_id"
            ],
            "properties": {
                "access_level": {
                    "type": "integer",
                    "maximum": 499,
                    "minimum": 1
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "controllers.AddMemberResponse": {
            "type": "object",
            "properties": {
                "access_level": {
                    "type": "integer"
                },
                "added_at": {
                    "type": "integer"
                },
                "channel_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "controllers.BackupCodesResponse": {
            "type": "object",
            "properties": {
                "backup_codes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-order": "0"
                },
                "generated_at": {
                    "type": "string",
                    "x-order": "1"
                },
                "codes_remaining": {
                    "type": "integer",
                    "x-order": "2"
                }
            }
        },
        "controllers.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "maxLength": 72,
                    "x-order": "0"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 10,
                    "x-order": "1"
                },
                "confirm_password": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        },
        "controllers.ChannelMembership": {
            "type": "object",
            "properties": {
                "access_level": {
                    "type": "integer"
                },
                "channel_id": {
                    "type": "integer"
                },
                "channel_name": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "integer"
                },
                "member_count": {
                    "type": "integer"
                }
            }
        },
        "controllers.ChannelRegistrationData": {
            "type": "object",
            "properties": {
                "application_id": {
                    "description": "ID of the pending registration application",
                    "type": "integer"
                },
                "channel_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"pending\", \"under_review\"",
                    "type": "string"
                },
                "submitted_at": {
                    "description": "When the application was submitted",
                    "type": "string"
                }
            }
        },
        "controllers.ChannelRegistrationRequest": {
            "type": "object",
            "required": [
                "channel_name",
                "description",
                "supporters"
            ],
            "properties": {
                "channel_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "description": {
                    "type": "string",
                    "maxLength": 300
                },
                "supporters": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controllers.ChannelRegistrationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.ChannelRegistrationData"
                },
                "status": {
                    "description": "Always \"success\"",
                    "type": "string"
                }
            }
        },
        "controllers.ChannelSearchResult": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "member_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "controllers.DisableTOTPRequest": {
            "type": "object",
            "required": [
                "current_password",
                "otp_code"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "maxLength": 72,
                    "x-order": "0"
                },
                "otp_code": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "controllers.EnrollTOTPRequest": {
            "type": "object",
            "required": [
                "current_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "maxLength": 72,
                    "x-order": "0"
                }
            }
        },
        "controllers.EnrollTOTPResponse": {
            "type": "object",
            "properties": {
                "qr_code_base64": {
                    "type": "string",
                    "x-order": "0"
                },
                "secret": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "controllers.GetChannelSettingsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "member_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "x-order": "0",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "refresh_token": {
                    "type": "string",
                    "x-order": "1",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
            }
        },
        "controllers.ManagerChangeConfirmationData": {
            "type": "object",
            "properties": {
                "change_type": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "integer"
                },
                "channel_name": {
                    "type": "string"
                },
                "request_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.ManagerChangeConfirmationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.ManagerChangeConfirmationData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.ManagerChangeData": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "change_type": {
                    "type": "string",
                    "x-order": "1"
                },
                "new_manager": {
                    "type": "string",
                    "x-order": "2"
                },
                "duration_weeks": {
                    "type": "integer",
                    "x-order": "3"
                },
                "reason": {
                    "type": "string",
                    "x-order": "4"
                },
                "submitted_at": {
                    "type": "string",
                    "x-order": "5"
                },
                "expires_at": {
                    "type": "string",
                    "x-order": "6"
                },
                "status": {
                    "type": "string",
                    "x-order": "7"
                }
            }
        },
        "controllers.ManagerChangeRequest": {
            "type": "object",
            "required": [
                "change_type",
                "new_manager_username",
                "reason"
            ],
            "properties": {
                "change_type": {
                    "type": "string",
                    "enum": [
                        "temporary",
                        "permanent"
                    ]
                },
                "duration_weeks": {
                    "type": "integer",
                    "maximum": 7,
                    "minimum": 3
                },
                "new_manager_username": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 2
                },
                "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                }
            }
        },
        "controllers.ManagerChangeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.ManagerChangeData"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.ManagerChangeStatusResponse": {
            "type": "object",
            "properties": {
                "change_type": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "integer"
                },
                "duration_weeks": {
                    "type": "integer"
                },
                "expires_at": {
                    "type": "string"
                },
                "new_manager": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "request_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                }
            }
        },
        "controllers.PaginationInfo": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controllers.RegenerateBackupCodesRequest": {
            "type": "object",
            "required": [
                "totp_code"
            ],
            "properties": {
                "totp_code": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "controllers.RegenerateBackupCodesResponse": {
            "type": "object",
            "properties": {
                "backup_codes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-order": "0"
                },
                "generated_at": {
                    "type": "string",
                    "x-order": "1"
                },
                "codes_remaining": {
                    "type": "integer",
                    "x-order": "2"
                },
                "message": {
                    "type": "string",
                    "x-order": "3"
                }
            }
        },
        "controllers.RemoveMemberRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "controllers.RemoveMemberResponse": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "removed_at": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "controllers.Role": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "description": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        },
        "controllers.SearchChannelsResponse": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.ChannelSearchResult"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/controllers.PaginationInfo"
                }
            }
        },
        "controllers.UpdateChannelSettingsRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "url": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "controllers.UpdateChannelSettingsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "controllers.UserRegisterActivateRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "controllers.UserRegisterActivateResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "0"
                },
                "email": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "controllers.UserRegisterRequest": {
            "type": "object",
            "required": [
                "aup",
                "confirm_password",
                "coppa",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 2,
                    "x-order": "0"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 10,
                    "x-order": "1"
                },
                "confirm_password": {
                    "type": "string",
                    "x-order": "2"
                },
                "email": {
                    "type": "string",
                    "x-order": "3"
                },
                "aup": {
                    "type": "boolean",
                    "x-order": "4"
                },
                "coppa": {
                    "type": "boolean",
                    "x-order": "5"
                }
            }
        },
        "controllers.UserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "username": {
                    "type": "string",
                    "x-order": "1"
                },
                "backup_codes_remaining": {
                    "description": "Number of remaining backup codes (only shown when warning is true)",
                    "type": "integer",
                    "x-order": "10"
                },
                "backup_codes_warning": {
                    "description": "Warning flag when ≤3 backup codes remain (only shown when true)",
                    "type": "boolean",
                    "x-order": "11"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.ChannelMembership"
                    },
                    "x-order": "12"
                },
                "email": {
                    "type": "string",
                    "x-order": "2"
                },
                "max_logins": {
                    "type": "integer",
                    "x-order": "3"
                },
                "language_code": {
                    "type": "string",
                    "x-order": "4"
                },
                "language_name": {
                    "type": "string",
                    "x-order": "5"
                },
                "last_seen": {
                    "type": "integer",
                    "x-order": "6"
                },
                "totp_enabled": {
                    "description": "Whether 2FA (TOTP) is enabled",
                    "type": "boolean",
                    "x-order": "7"
                },
                "backup_codes_generated": {
                    "description": "Whether backup codes have been generated (only shown if 2FA enabled)",
                    "type": "boolean",
                    "x-order": "8"
                },
                "backup_codes_read": {
                    "description": "Whether backup codes have been viewed by user (only shown if 2FA enabled)",
                    "type": "boolean",
                    "x-order": "9"
                }
            }
        },
        "controllers.UserRolesResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "x-order": "0"
                        },
                        "username": {
                            "type": "string",
                            "x-order": "1"
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.Role"
                            },
                            "x-order": "1"
                        }
                    },
                    "x-order": "0"
                }
            }
        },
        "controllers.factorRequest": {
            "type": "object",
            "required": [
                "otp",
                "state_token"
            ],
            "properties": {
                "state_token": {
                    "description": "State token from login response",
                    "type": "string",
                    "x-order": "0"
                },
                "otp": {
                    "description": "6-digit TOTP code or backup code (format: abcde-12345)",
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 6,
                    "x-order": "1"
                }
            }
        },
        "controllers.loginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "maxLength": 12,
                    "minLength": 2,
                    "x-order": "0"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "x-order": "1"
                }
            }
        },
        "controllers.logoutRequest": {
            "type": "object",
            "properties": {
                "logout_all": {
                    "type": "boolean"
                }
            }
        },
        "controllers.passwordResetRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "controllers.passwordResetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "controllers.resetPasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "new_password",
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "x-order": "0"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 10,
                    "x-order": "1"
                },
                "confirm_password": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        },
        "controllers.resetPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "errors.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "description": "Error code constant",
                            "type": "string"
                        },
                        "details": {
                            "description": "Additional error details (validation errors, etc.)"
                        },
                        "message": {
                            "description": "Human-readable message",
                            "type": "string"
                        }
                    }
                },
                "status": {
                    "description": "Always \"error\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWTBearerToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}