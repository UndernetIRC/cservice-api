basePath: /api/v1
definitions:
  controllers.LoginResponse:
    properties:
      access_token:
        type: string
        x-order: "0"
      refresh_token:
        type: string
        x-order: "1"
    type: object
  controllers.MeChannelResponse:
    properties:
      access:
        type: integer
      channel_id:
        type: integer
      last_modified:
        type: integer
      name:
        type: string
    type: object
  controllers.MeResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/controllers.MeChannelResponse'
        type: array
        x-order: "9"
      email:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      language_code:
        type: string
        x-order: "4"
      language_name:
        type: string
        x-order: "5"
      last_seen:
        type: integer
        x-order: "6"
      max_logins:
        type: integer
        x-order: "3"
      totp_enabled:
        type: boolean
        x-order: "8"
      username:
        type: string
        x-order: "1"
    type: object
  controllers.RegisterRequest:
    properties:
      coppa:
        type: boolean
        x-order: "4"
      email:
        type: string
        x-order: "2"
      eula:
        type: boolean
        x-order: "3"
      password:
        maxLength: 72
        minLength: 10
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - coppa
    - email
    - eula
    - password
    - username
    type: object
  controllers.customError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controllers.factorRequest:
    properties:
      otp:
        type: string
      state_token:
        type: string
    required:
    - otp
    type: object
  controllers.loginRequest:
    properties:
      password:
        maxLength: 72
        type: string
        x-order: "1"
      username:
        maxLength: 12
        minLength: 2
        type: string
        x-order: "0"
    required:
    - password
    - username
    type: object
  controllers.logoutRequest:
    properties:
      logout_all:
        type: boolean
    type: object
  controllers.refreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: ratler@undernet.org
    name: Ratler
  description: '...'
  license:
    name: MIT
    url: https://github.com/UndernetIRC/cservice-api/blob/master/LICENSE
  title: UnderNET Channel Service API
  version: "0.1"
paths:
  /authn:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "401":
          description: Invalid username or password
      summary: Authenticate user to retrieve JWT token
      tags:
      - accounts
  /authn/factor_verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: State token and OTP
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.factorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Verify the user factor (OTP)
      tags:
      - accounts
  /authn/logout:
    post:
      consumes:
      - application/json
      parameters:
      - description: Logout request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.logoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged out
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Logout user
      tags:
      - accounts
  /authn/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh token
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Request new session tokens using a Refresh JWT token
      tags:
      - accounts
  /authn/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.customError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.customError'
      summary: Register a new user
      tags:
      - accounts
  /me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MeResponse'
        "401":
          description: Authorization information is missing or invalid.
      summary: Get detailed information about the current user
      tags:
      - accounts
swagger: "2.0"
