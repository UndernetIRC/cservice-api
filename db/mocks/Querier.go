// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/undernetirc/cservice-api/models"

	netip "net/netip"

	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// AddChannelMember provides a mock function with given fields: ctx, arg
func (_m *Querier) AddChannelMember(ctx context.Context, arg models.AddChannelMemberParams) (models.AddChannelMemberRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelMember")
	}

	var r0 models.AddChannelMemberRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddChannelMemberParams) (models.AddChannelMemberRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AddChannelMemberParams) models.AddChannelMemberRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.AddChannelMemberRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AddChannelMemberParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddChannelOwner provides a mock function with given fields: ctx, channelID, userID
func (_m *Querier) AddChannelOwner(ctx context.Context, channelID int32, userID int32) error {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *Querier) AddUserRole(ctx context.Context, userID int32, roleID int32) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUsersToRole provides a mock function with given fields: ctx, arg
func (_m *Querier) AddUsersToRole(ctx context.Context, arg []models.AddUsersToRoleParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddUsersToRole")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.AddUsersToRoleParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.AddUsersToRoleParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.AddUsersToRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChannelExists provides a mock function with given fields: ctx, id
func (_m *Querier) CheckChannelExists(ctx context.Context, id int32) (models.CheckChannelExistsRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckChannelExists")
	}

	var r0 models.CheckChannelExistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.CheckChannelExistsRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.CheckChannelExistsRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.CheckChannelExistsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChannelMemberExists provides a mock function with given fields: ctx, channelID, userID
func (_m *Querier) CheckChannelMemberExists(ctx context.Context, channelID int32, userID int32) (models.CheckChannelMemberExistsRow, error) {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckChannelMemberExists")
	}

	var r0 models.CheckChannelMemberExistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (models.CheckChannelMemberExistsRow, error)); ok {
		return rf(ctx, channelID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) models.CheckChannelMemberExistsRow); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Get(0).(models.CheckChannelMemberExistsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, channelID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChannelNameExists provides a mock function with given fields: ctx, lower
func (_m *Querier) CheckChannelNameExists(ctx context.Context, lower string) (models.CheckChannelNameExistsRow, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for CheckChannelNameExists")
	}

	var r0 models.CheckChannelNameExistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.CheckChannelNameExistsRow, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.CheckChannelNameExistsRow); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(models.CheckChannelNameExistsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChannelNoregStatus provides a mock function with given fields: ctx, lower
func (_m *Querier) CheckChannelNoregStatus(ctx context.Context, lower string) (models.CheckChannelNoregStatusRow, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for CheckChannelNoregStatus")
	}

	var r0 models.CheckChannelNoregStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.CheckChannelNoregStatusRow, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.CheckChannelNoregStatusRow); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(models.CheckChannelNoregStatusRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmailExists provides a mock function with given fields: ctx, email
func (_m *Querier) CheckEmailExists(ctx context.Context, email string) ([]pgtype.Text, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CheckEmailExists")
	}

	var r0 []pgtype.Text
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]pgtype.Text, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []pgtype.Text); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgtype.Text)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckMultipleSupportersConcurrentSupports provides a mock function with given fields: ctx, column1, column2
func (_m *Querier) CheckMultipleSupportersConcurrentSupports(ctx context.Context, column1 []string, column2 int32) ([]models.CheckMultipleSupportersConcurrentSupportsRow, error) {
	ret := _m.Called(ctx, column1, column2)

	if len(ret) == 0 {
		panic("no return value specified for CheckMultipleSupportersConcurrentSupports")
	}

	var r0 []models.CheckMultipleSupportersConcurrentSupportsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int32) ([]models.CheckMultipleSupportersConcurrentSupportsRow, error)); ok {
		return rf(ctx, column1, column2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int32) []models.CheckMultipleSupportersConcurrentSupportsRow); ok {
		r0 = rf(ctx, column1, column2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CheckMultipleSupportersConcurrentSupportsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int32) error); ok {
		r1 = rf(ctx, column1, column2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckMultipleSupportersNoregStatus provides a mock function with given fields: ctx, dollar_1
func (_m *Querier) CheckMultipleSupportersNoregStatus(ctx context.Context, dollar_1 []string) ([]models.CheckMultipleSupportersNoregStatusRow, error) {
	ret := _m.Called(ctx, dollar_1)

	if len(ret) == 0 {
		panic("no return value specified for CheckMultipleSupportersNoregStatus")
	}

	var r0 []models.CheckMultipleSupportersNoregStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.CheckMultipleSupportersNoregStatusRow, error)); ok {
		return rf(ctx, dollar_1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.CheckMultipleSupportersNoregStatusRow); ok {
		r0 = rf(ctx, dollar_1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CheckMultipleSupportersNoregStatusRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, dollar_1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPendingChannelNameConflict provides a mock function with given fields: ctx, lower
func (_m *Querier) CheckPendingChannelNameConflict(ctx context.Context, lower string) (models.CheckPendingChannelNameConflictRow, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for CheckPendingChannelNameConflict")
	}

	var r0 models.CheckPendingChannelNameConflictRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.CheckPendingChannelNameConflictRow, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.CheckPendingChannelNameConflictRow); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(models.CheckPendingChannelNameConflictRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckSupporterConcurrentSupports provides a mock function with given fields: ctx, userID
func (_m *Querier) CheckSupporterConcurrentSupports(ctx context.Context, userID int32) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckSupporterConcurrentSupports")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckSupporterNoregStatus provides a mock function with given fields: ctx, lower
func (_m *Querier) CheckSupporterNoregStatus(ctx context.Context, lower string) (bool, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for CheckSupporterNoregStatus")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserNoregStatus provides a mock function with given fields: ctx, lower
func (_m *Querier) CheckUserNoregStatus(ctx context.Context, lower string) (bool, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserNoregStatus")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUsernameExists provides a mock function with given fields: ctx, username
func (_m *Querier) CheckUsernameExists(ctx context.Context, username string) ([]string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckUsernameExists")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanupExpiredNoreg provides a mock function with given fields: ctx
func (_m *Querier) CleanupExpiredNoreg(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredNoreg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanupExpiredPasswordResetTokens provides a mock function with given fields: ctx, expiresAt, lastUpdated
func (_m *Querier) CleanupExpiredPasswordResetTokens(ctx context.Context, expiresAt int32, lastUpdated int32) error {
	ret := _m.Called(ctx, expiresAt, lastUpdated)

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredPasswordResetTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, expiresAt, lastUpdated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountChannelOwners provides a mock function with given fields: ctx, channelID
func (_m *Querier) CountChannelOwners(ctx context.Context, channelID int32) (int64, error) {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for CountChannelOwners")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int64, error)); ok {
		return rf(ctx, channelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int64); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateChannel(ctx context.Context, arg models.CreateChannelParams) (models.CreateChannelRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 models.CreateChannelRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateChannelParams) (models.CreateChannelRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateChannelParams) models.CreateChannelRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.CreateChannelRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateChannelParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelForInstantRegistration provides a mock function with given fields: ctx, name
func (_m *Querier) CreateChannelForInstantRegistration(ctx context.Context, name string) (models.CreateChannelForInstantRegistrationRow, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelForInstantRegistration")
	}

	var r0 models.CreateChannelForInstantRegistrationRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.CreateChannelForInstantRegistrationRow, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.CreateChannelForInstantRegistrationRow); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.CreateChannelForInstantRegistrationRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelForRegistration provides a mock function with given fields: ctx, name
func (_m *Querier) CreateChannelForRegistration(ctx context.Context, name string) (models.CreateChannelForRegistrationRow, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelForRegistration")
	}

	var r0 models.CreateChannelForRegistrationRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.CreateChannelForRegistrationRow, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.CreateChannelForRegistrationRow); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.CreateChannelForRegistrationRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelSupporter provides a mock function with given fields: ctx, channelID, userID
func (_m *Querier) CreateChannelSupporter(ctx context.Context, channelID int32, userID int32) error {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelSupporter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInstantRegistration provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateInstantRegistration(ctx context.Context, arg models.CreateInstantRegistrationParams) (models.CreateInstantRegistrationRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstantRegistration")
	}

	var r0 models.CreateInstantRegistrationRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateInstantRegistrationParams) (models.CreateInstantRegistrationRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateInstantRegistrationParams) models.CreateInstantRegistrationRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.CreateInstantRegistrationRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateInstantRegistrationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePasswordResetToken provides a mock function with given fields: ctx, arg
func (_m *Querier) CreatePasswordResetToken(ctx context.Context, arg models.CreatePasswordResetTokenParams) (models.PasswordResetToken, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePasswordResetToken")
	}

	var r0 models.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePasswordResetTokenParams) (models.PasswordResetToken, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePasswordResetTokenParams) models.PasswordResetToken); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.PasswordResetToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePasswordResetTokenParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePendingChannel provides a mock function with given fields: ctx, arg
func (_m *Querier) CreatePendingChannel(ctx context.Context, arg models.CreatePendingChannelParams) (models.CreatePendingChannelRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePendingChannel")
	}

	var r0 models.CreatePendingChannelRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingChannelParams) (models.CreatePendingChannelRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingChannelParams) models.CreatePendingChannelRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.CreatePendingChannelRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePendingChannelParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePendingUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreatePendingUser(ctx context.Context, arg models.CreatePendingUserParams) (pgtype.Text, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePendingUser")
	}

	var r0 pgtype.Text
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingUserParams) (pgtype.Text, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingUserParams) pgtype.Text); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.Text)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePendingUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateRole(ctx context.Context, arg models.CreateRoleParams) (models.Role, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRoleParams) (models.Role, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRoleParams) models.Role); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg models.CreateUserParams) (models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserParams) (models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserParams) models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelSupporters provides a mock function with given fields: ctx, channelID
func (_m *Querier) DeleteChannelSupporters(ctx context.Context, channelID int32) error {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelSupporters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredPasswordResetTokens provides a mock function with given fields: ctx, expiresAt
func (_m *Querier) DeleteExpiredPasswordResetTokens(ctx context.Context, expiresAt int32) error {
	ret := _m.Called(ctx, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredPasswordResetTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePendingChannel provides a mock function with given fields: ctx, channelID
func (_m *Querier) DeletePendingChannel(ctx context.Context, channelID int32) error {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePendingChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePendingUserByCookie provides a mock function with given fields: ctx, cookie
func (_m *Querier) DeletePendingUserByCookie(ctx context.Context, cookie pgtype.Text) error {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for DeletePendingUserByCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) error); ok {
		r0 = rf(ctx, cookie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteRole(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpecificChannelSupporter provides a mock function with given fields: ctx, channelID, userID
func (_m *Querier) DeleteSpecificChannelSupporter(ctx context.Context, channelID int32, userID int32) error {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpecificChannelSupporter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivePasswordResetTokensByUserID provides a mock function with given fields: ctx, userID, expiresAt
func (_m *Querier) GetActivePasswordResetTokensByUserID(ctx context.Context, userID pgtype.Int4, expiresAt int32) ([]models.PasswordResetToken, error) {
	ret := _m.Called(ctx, userID, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GetActivePasswordResetTokensByUserID")
	}

	var r0 []models.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4, int32) ([]models.PasswordResetToken, error)); ok {
		return rf(ctx, userID, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4, int32) []models.PasswordResetToken); ok {
		r0 = rf(ctx, userID, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PasswordResetToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int4, int32) error); ok {
		r1 = rf(ctx, userID, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminLevel provides a mock function with given fields: ctx, userID
func (_m *Querier) GetAdminLevel(ctx context.Context, userID int32) (models.GetAdminLevelRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminLevel")
	}

	var r0 models.GetAdminLevelRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetAdminLevelRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetAdminLevelRow); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.GetAdminLevelRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetChannelByID(ctx context.Context, id int32) (models.GetChannelByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByID")
	}

	var r0 models.GetChannelByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetChannelByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetChannelByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.GetChannelByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelByName provides a mock function with given fields: ctx, name
func (_m *Querier) GetChannelByName(ctx context.Context, name string) (models.GetChannelByNameRow, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByName")
	}

	var r0 models.GetChannelByNameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.GetChannelByNameRow, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.GetChannelByNameRow); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.GetChannelByNameRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelDetails provides a mock function with given fields: ctx, id
func (_m *Querier) GetChannelDetails(ctx context.Context, id int32) (models.GetChannelDetailsRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelDetails")
	}

	var r0 models.GetChannelDetailsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetChannelDetailsRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetChannelDetailsRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.GetChannelDetailsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelMembersByAccessLevel provides a mock function with given fields: ctx, channelID, access
func (_m *Querier) GetChannelMembersByAccessLevel(ctx context.Context, channelID int32, access int32) ([]models.GetChannelMembersByAccessLevelRow, error) {
	ret := _m.Called(ctx, channelID, access)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMembersByAccessLevel")
	}

	var r0 []models.GetChannelMembersByAccessLevelRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]models.GetChannelMembersByAccessLevelRow, error)); ok {
		return rf(ctx, channelID, access)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []models.GetChannelMembersByAccessLevelRow); ok {
		r0 = rf(ctx, channelID, access)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetChannelMembersByAccessLevelRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, channelID, access)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelUserAccess provides a mock function with given fields: ctx, channelID, userID
func (_m *Querier) GetChannelUserAccess(ctx context.Context, channelID int32, userID int32) (models.GetChannelUserAccessRow, error) {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelUserAccess")
	}

	var r0 models.GetChannelUserAccessRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (models.GetChannelUserAccessRow, error)); ok {
		return rf(ctx, channelID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) models.GetChannelUserAccessRow); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Get(0).(models.GetChannelUserAccessRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, channelID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlineByIP provides a mock function with given fields: ctx, host
func (_m *Querier) GetGlineByIP(ctx context.Context, host string) (models.Gline, error) {
	ret := _m.Called(ctx, host)

	if len(ret) == 0 {
		panic("no return value specified for GetGlineByIP")
	}

	var r0 models.Gline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Gline, error)); ok {
		return rf(ctx, host)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Gline); ok {
		r0 = rf(ctx, host)
	} else {
		r0 = ret.Get(0).(models.Gline)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastChannelRegistration provides a mock function with given fields: ctx, userID
func (_m *Querier) GetLastChannelRegistration(ctx context.Context, userID int32) (pgtype.Int4, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastChannelRegistration")
	}

	var r0 pgtype.Int4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (pgtype.Int4, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) pgtype.Int4); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(pgtype.Int4)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordResetTokenByToken provides a mock function with given fields: ctx, token
func (_m *Querier) GetPasswordResetTokenByToken(ctx context.Context, token string) (models.PasswordResetToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetPasswordResetTokenByToken")
	}

	var r0 models.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.PasswordResetToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.PasswordResetToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(models.PasswordResetToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordResetTokenStats provides a mock function with given fields: ctx, expiresAt
func (_m *Querier) GetPasswordResetTokenStats(ctx context.Context, expiresAt int32) (models.GetPasswordResetTokenStatsRow, error) {
	ret := _m.Called(ctx, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GetPasswordResetTokenStats")
	}

	var r0 models.GetPasswordResetTokenStatsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetPasswordResetTokenStatsRow, error)); ok {
		return rf(ctx, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetPasswordResetTokenStatsRow); ok {
		r0 = rf(ctx, expiresAt)
	} else {
		r0 = ret.Get(0).(models.GetPasswordResetTokenStatsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingUserByCookie provides a mock function with given fields: ctx, cookie
func (_m *Querier) GetPendingUserByCookie(ctx context.Context, cookie pgtype.Text) (models.Pendinguser, error) {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingUserByCookie")
	}

	var r0 models.Pendinguser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) (models.Pendinguser, error)); ok {
		return rf(ctx, cookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) models.Pendinguser); ok {
		r0 = rf(ctx, cookie)
	} else {
		r0 = ret.Get(0).(models.Pendinguser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, cookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetRoleByID(ctx context.Context, id int32) (models.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.Role); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *Querier) GetRoleByName(ctx context.Context, name string) (models.Role, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Role); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportersByUsernames provides a mock function with given fields: ctx, column1, column2
func (_m *Querier) GetSupportersByUsernames(ctx context.Context, column1 []string, column2 int32) ([]models.GetSupportersByUsernamesRow, error) {
	ret := _m.Called(ctx, column1, column2)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportersByUsernames")
	}

	var r0 []models.GetSupportersByUsernamesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int32) ([]models.GetSupportersByUsernamesRow, error)); ok {
		return rf(ctx, column1, column2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int32) []models.GetSupportersByUsernamesRow); ok {
		r0 = rf(ctx, column1, column2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetSupportersByUsernamesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int32) error); ok {
		r1 = rf(ctx, column1, column2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, arg
func (_m *Querier) GetUser(ctx context.Context, arg models.GetUserParams) (models.GetUserRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.GetUserRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserParams) (models.GetUserRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserParams) models.GetUserRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.GetUserRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserChannelCount provides a mock function with given fields: ctx, userID
func (_m *Querier) GetUserChannelCount(ctx context.Context, userID int32) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChannelCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserChannelLimit provides a mock function with given fields: ctx, arg
func (_m *Querier) GetUserChannelLimit(ctx context.Context, arg models.GetUserChannelLimitParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChannelLimit")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserChannelLimitParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserChannelLimitParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetUserChannelLimitParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserChannelMemberships provides a mock function with given fields: ctx, userID
func (_m *Querier) GetUserChannelMemberships(ctx context.Context, userID int32) ([]models.GetUserChannelMembershipsRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChannelMemberships")
	}

	var r0 []models.GetUserChannelMembershipsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]models.GetUserChannelMembershipsRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []models.GetUserChannelMembershipsRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUserChannelMembershipsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserChannels provides a mock function with given fields: ctx, userID
func (_m *Querier) GetUserChannels(ctx context.Context, userID int32) ([]models.GetUserChannelsRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChannels")
	}

	var r0 []models.GetUserChannelsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]models.GetUserChannelsRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []models.GetUserChannelsRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUserChannelsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserNoregDetails provides a mock function with given fields: ctx, lower
func (_m *Querier) GetUserNoregDetails(ctx context.Context, lower string) (models.GetUserNoregDetailsRow, error) {
	ret := _m.Called(ctx, lower)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNoregDetails")
	}

	var r0 models.GetUserNoregDetailsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.GetUserNoregDetailsRow, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.GetUserNoregDetailsRow); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(models.GetUserNoregDetailsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPendingRegistrations provides a mock function with given fields: ctx, managerID
func (_m *Querier) GetUserPendingRegistrations(ctx context.Context, managerID pgtype.Int4) (int64, error) {
	ret := _m.Called(ctx, managerID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPendingRegistrations")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) (int64, error)); ok {
		return rf(ctx, managerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4) int64); ok {
		r0 = rf(ctx, managerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int4) error); ok {
		r1 = rf(ctx, managerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByUsernames provides a mock function with given fields: ctx, userids
func (_m *Querier) GetUsersByUsernames(ctx context.Context, userids []string) ([]models.GetUsersByUsernamesRow, error) {
	ret := _m.Called(ctx, userids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByUsernames")
	}

	var r0 []models.GetUsersByUsernamesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.GetUsersByUsernamesRow, error)); ok {
		return rf(ctx, userids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.GetUsersByUsernamesRow); ok {
		r0 = rf(ctx, userids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUsersByUsernamesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWhiteListByIP provides a mock function with given fields: ctx, ip
func (_m *Querier) GetWhiteListByIP(ctx context.Context, ip netip.Addr) (models.Whitelist, error) {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for GetWhiteListByIP")
	}

	var r0 models.Whitelist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr) (models.Whitelist, error)); ok {
		return rf(ctx, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr) models.Whitelist); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(models.Whitelist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, netip.Addr) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateUserPasswordResetTokens provides a mock function with given fields: ctx, userID, lastUpdated
func (_m *Querier) InvalidateUserPasswordResetTokens(ctx context.Context, userID pgtype.Int4, lastUpdated int32) error {
	ret := _m.Called(ctx, userID, lastUpdated)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserPasswordResetTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int4, int32) error); ok {
		r0 = rf(ctx, userID, lastUpdated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPendingUsers provides a mock function with given fields: ctx
func (_m *Querier) ListPendingUsers(ctx context.Context) ([]models.Pendinguser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPendingUsers")
	}

	var r0 []models.Pendinguser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Pendinguser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Pendinguser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pendinguser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx
func (_m *Querier) ListRoles(ctx context.Context) ([]models.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserRoles provides a mock function with given fields: ctx, userID
func (_m *Querier) ListUserRoles(ctx context.Context, userID int32) ([]models.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]models.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []models.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkPasswordResetTokenAsUsed provides a mock function with given fields: ctx, arg
func (_m *Querier) MarkPasswordResetTokenAsUsed(ctx context.Context, arg models.MarkPasswordResetTokenAsUsedParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkPasswordResetTokenAsUsed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MarkPasswordResetTokenAsUsedParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveChannelMember provides a mock function with given fields: ctx, arg
func (_m *Querier) RemoveChannelMember(ctx context.Context, arg models.RemoveChannelMemberParams) (models.RemoveChannelMemberRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelMember")
	}

	var r0 models.RemoveChannelMemberRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RemoveChannelMemberParams) (models.RemoveChannelMemberRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.RemoveChannelMemberParams) models.RemoveChannelMemberRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.RemoveChannelMemberRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.RemoveChannelMemberParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *Querier) RemoveUserRole(ctx context.Context, userID int32, roleID int32) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUsersFromRole provides a mock function with given fields: ctx, userIds, roleID
func (_m *Querier) RemoveUsersFromRole(ctx context.Context, userIds []int32, roleID int32) error {
	ret := _m.Called(ctx, userIds, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUsersFromRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int32, int32) error); ok {
		r0 = rf(ctx, userIds, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchChannels provides a mock function with given fields: ctx, arg
func (_m *Querier) SearchChannels(ctx context.Context, arg models.SearchChannelsParams) ([]models.SearchChannelsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannels")
	}

	var r0 []models.SearchChannelsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchChannelsParams) ([]models.SearchChannelsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchChannelsParams) []models.SearchChannelsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SearchChannelsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SearchChannelsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChannelsCount provides a mock function with given fields: ctx, name
func (_m *Querier) SearchChannelsCount(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannelsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteChannel provides a mock function with given fields: ctx, id
func (_m *Querier) SoftDeleteChannel(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChannelRegistrationStatus provides a mock function with given fields: ctx, id
func (_m *Querier) UpdateChannelRegistrationStatus(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelRegistrationStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChannelSettings provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateChannelSettings(ctx context.Context, arg models.UpdateChannelSettingsParams) (models.UpdateChannelSettingsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelSettings")
	}

	var r0 models.UpdateChannelSettingsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateChannelSettingsParams) (models.UpdateChannelSettingsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateChannelSettingsParams) models.UpdateChannelSettingsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.UpdateChannelSettingsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UpdateChannelSettingsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePendingChannelDescription provides a mock function with given fields: ctx, channelID, description
func (_m *Querier) UpdatePendingChannelDescription(ctx context.Context, channelID int32, description pgtype.Text) error {
	ret := _m.Called(ctx, channelID, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePendingChannelDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, pgtype.Text) error); ok {
		r0 = rf(ctx, channelID, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePendingChannelStatus provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdatePendingChannelStatus(ctx context.Context, arg models.UpdatePendingChannelStatusParams) (models.UpdatePendingChannelStatusRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePendingChannelStatus")
	}

	var r0 models.UpdatePendingChannelStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdatePendingChannelStatusParams) (models.UpdatePendingChannelStatusRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdatePendingChannelStatusParams) models.UpdatePendingChannelStatusRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.UpdatePendingChannelStatusRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UpdatePendingChannelStatusParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateRole(ctx context.Context, arg models.UpdateRoleParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateRoleParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserFlags provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUserFlags(ctx context.Context, arg models.UpdateUserFlagsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserFlags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserFlagsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserLastSeen provides a mock function with given fields: ctx, userID
func (_m *Querier) UpdateUserLastSeen(ctx context.Context, userID int32) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserLastSeen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUserPassword(ctx context.Context, arg models.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserTotpKey provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUserTotpKey(ctx context.Context, arg models.UpdateUserTotpKeyParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTotpKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserTotpKeyParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePasswordResetToken provides a mock function with given fields: ctx, token, expiresAt
func (_m *Querier) ValidatePasswordResetToken(ctx context.Context, token string, expiresAt int32) (models.PasswordResetToken, error) {
	ret := _m.Called(ctx, token, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePasswordResetToken")
	}

	var r0 models.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (models.PasswordResetToken, error)); ok {
		return rf(ctx, token, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) models.PasswordResetToken); ok {
		r0 = rf(ctx, token, expiresAt)
	} else {
		r0 = ret.Get(0).(models.PasswordResetToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, token, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
