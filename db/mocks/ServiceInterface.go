// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/undernetirc/cservice-api/models"

	netip "net/netip"

	pgtype "github.com/jackc/pgx/v5/pgtype"

	pgx "github.com/jackc/pgx/v5"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// AddUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *ServiceInterface) AddUserRole(ctx context.Context, userID int32, roleID int32) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUsersToRole provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) AddUsersToRole(ctx context.Context, arg []models.AddUsersToRoleParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddUsersToRole")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.AddUsersToRoleParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.AddUsersToRoleParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.AddUsersToRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChannelExists provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) CheckChannelExists(ctx context.Context, id int32) (models.CheckChannelExistsRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckChannelExists")
	}

	var r0 models.CheckChannelExistsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.CheckChannelExistsRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.CheckChannelExistsRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.CheckChannelExistsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmailExists provides a mock function with given fields: ctx, email
func (_m *ServiceInterface) CheckEmailExists(ctx context.Context, email string) ([]pgtype.Text, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CheckEmailExists")
	}

	var r0 []pgtype.Text
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]pgtype.Text, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []pgtype.Text); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgtype.Text)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUsernameExists provides a mock function with given fields: ctx, username
func (_m *ServiceInterface) CheckUsernameExists(ctx context.Context, username string) ([]string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckUsernameExists")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePendingUser provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) CreatePendingUser(ctx context.Context, arg models.CreatePendingUserParams) (pgtype.Text, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePendingUser")
	}

	var r0 pgtype.Text
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingUserParams) (pgtype.Text, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePendingUserParams) pgtype.Text); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.Text)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePendingUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) CreateRole(ctx context.Context, arg models.CreateRoleParams) (models.Role, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRoleParams) (models.Role, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRoleParams) models.Role); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) CreateUser(ctx context.Context, arg models.CreateUserParams) (models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserParams) (models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserParams) models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePendingUserByCookie provides a mock function with given fields: ctx, cookie
func (_m *ServiceInterface) DeletePendingUserByCookie(ctx context.Context, cookie pgtype.Text) error {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for DeletePendingUserByCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) error); ok {
		r0 = rf(ctx, cookie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) DeleteRole(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminLevel provides a mock function with given fields: ctx, userID
func (_m *ServiceInterface) GetAdminLevel(ctx context.Context, userID int32) (models.GetAdminLevelRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminLevel")
	}

	var r0 models.GetAdminLevelRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetAdminLevelRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetAdminLevelRow); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.GetAdminLevelRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelByID provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) GetChannelByID(ctx context.Context, id int32) (models.GetChannelByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByID")
	}

	var r0 models.GetChannelByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetChannelByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetChannelByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.GetChannelByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelDetails provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) GetChannelDetails(ctx context.Context, id int32) (models.GetChannelDetailsRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelDetails")
	}

	var r0 models.GetChannelDetailsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetChannelDetailsRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetChannelDetailsRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.GetChannelDetailsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelUserAccess provides a mock function with given fields: ctx, channelID, userID
func (_m *ServiceInterface) GetChannelUserAccess(ctx context.Context, channelID int32, userID int32) (models.GetChannelUserAccessRow, error) {
	ret := _m.Called(ctx, channelID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelUserAccess")
	}

	var r0 models.GetChannelUserAccessRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (models.GetChannelUserAccessRow, error)); ok {
		return rf(ctx, channelID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) models.GetChannelUserAccessRow); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Get(0).(models.GetChannelUserAccessRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, channelID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlineByIP provides a mock function with given fields: ctx, host
func (_m *ServiceInterface) GetGlineByIP(ctx context.Context, host string) (models.Gline, error) {
	ret := _m.Called(ctx, host)

	if len(ret) == 0 {
		panic("no return value specified for GetGlineByIP")
	}

	var r0 models.Gline
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Gline, error)); ok {
		return rf(ctx, host)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Gline); ok {
		r0 = rf(ctx, host)
	} else {
		r0 = ret.Get(0).(models.Gline)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingUserByCookie provides a mock function with given fields: ctx, cookie
func (_m *ServiceInterface) GetPendingUserByCookie(ctx context.Context, cookie pgtype.Text) (models.Pendinguser, error) {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingUserByCookie")
	}

	var r0 models.Pendinguser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) (models.Pendinguser, error)); ok {
		return rf(ctx, cookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) models.Pendinguser); ok {
		r0 = rf(ctx, cookie)
	} else {
		r0 = ret.Get(0).(models.Pendinguser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, cookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByID provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) GetRoleByID(ctx context.Context, id int32) (models.Role, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.Role); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *ServiceInterface) GetRoleByName(ctx context.Context, name string) (models.Role, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Role); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) GetUser(ctx context.Context, arg models.GetUserParams) (models.GetUserRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.GetUserRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserParams) (models.GetUserRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserParams) models.GetUserRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.GetUserRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *ServiceInterface) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *ServiceInterface) GetUserByID(ctx context.Context, id int32) (models.GetUserByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 models.GetUserByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (models.GetUserByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) models.GetUserByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.GetUserByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *ServiceInterface) GetUserByUsername(ctx context.Context, username string) (models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserChannels provides a mock function with given fields: ctx, userID
func (_m *ServiceInterface) GetUserChannels(ctx context.Context, userID int32) ([]models.GetUserChannelsRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChannels")
	}

	var r0 []models.GetUserChannelsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]models.GetUserChannelsRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []models.GetUserChannelsRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUserChannelsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByUsernames provides a mock function with given fields: ctx, userids
func (_m *ServiceInterface) GetUsersByUsernames(ctx context.Context, userids []string) ([]models.GetUsersByUsernamesRow, error) {
	ret := _m.Called(ctx, userids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByUsernames")
	}

	var r0 []models.GetUsersByUsernamesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.GetUsersByUsernamesRow, error)); ok {
		return rf(ctx, userids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.GetUsersByUsernamesRow); ok {
		r0 = rf(ctx, userids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUsersByUsernamesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWhiteListByIP provides a mock function with given fields: ctx, ip
func (_m *ServiceInterface) GetWhiteListByIP(ctx context.Context, ip netip.Addr) (models.Whitelist, error) {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for GetWhiteListByIP")
	}

	var r0 models.Whitelist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr) (models.Whitelist, error)); ok {
		return rf(ctx, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, netip.Addr) models.Whitelist); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(models.Whitelist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, netip.Addr) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPendingUsers provides a mock function with given fields: ctx
func (_m *ServiceInterface) ListPendingUsers(ctx context.Context) ([]models.Pendinguser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPendingUsers")
	}

	var r0 []models.Pendinguser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Pendinguser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Pendinguser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pendinguser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx
func (_m *ServiceInterface) ListRoles(ctx context.Context) ([]models.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserRoles provides a mock function with given fields: ctx, userID
func (_m *ServiceInterface) ListUserRoles(ctx context.Context, userID int32) ([]models.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]models.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []models.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *ServiceInterface) RemoveUserRole(ctx context.Context, userID int32, roleID int32) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUsersFromRole provides a mock function with given fields: ctx, userIds, roleID
func (_m *ServiceInterface) RemoveUsersFromRole(ctx context.Context, userIds []int32, roleID int32) error {
	ret := _m.Called(ctx, userIds, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUsersFromRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int32, int32) error); ok {
		r0 = rf(ctx, userIds, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchChannels provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) SearchChannels(ctx context.Context, arg models.SearchChannelsParams) ([]models.SearchChannelsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannels")
	}

	var r0 []models.SearchChannelsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchChannelsParams) ([]models.SearchChannelsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SearchChannelsParams) []models.SearchChannelsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SearchChannelsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SearchChannelsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChannelsCount provides a mock function with given fields: ctx, name
func (_m *ServiceInterface) SearchChannelsCount(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannelsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelSettings provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) UpdateChannelSettings(ctx context.Context, arg models.UpdateChannelSettingsParams) (models.UpdateChannelSettingsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelSettings")
	}

	var r0 models.UpdateChannelSettingsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateChannelSettingsParams) (models.UpdateChannelSettingsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateChannelSettingsParams) models.UpdateChannelSettingsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(models.UpdateChannelSettingsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UpdateChannelSettingsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) UpdateRole(ctx context.Context, arg models.UpdateRoleParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateRoleParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserFlags provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) UpdateUserFlags(ctx context.Context, arg models.UpdateUserFlagsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserFlags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserFlagsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) UpdateUserPassword(ctx context.Context, arg models.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserTotpKey provides a mock function with given fields: ctx, arg
func (_m *ServiceInterface) UpdateUserTotpKey(ctx context.Context, arg models.UpdateUserTotpKeyParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTotpKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserTotpKeyParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *ServiceInterface) WithTx(tx pgx.Tx) models.ServiceInterface {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 models.ServiceInterface
	if rf, ok := ret.Get(0).(func(pgx.Tx) models.ServiceInterface); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ServiceInterface)
		}
	}

	return r0
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
