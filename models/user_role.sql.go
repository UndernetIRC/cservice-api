// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_role.sql

package models

import (
	"context"
)

const addUserRole = `-- name: AddUserRole :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

func (q *Queries) AddUserRole(ctx context.Context, userID int32, roleID int32) error {
	_, err := q.db.Exec(ctx, addUserRole, userID, roleID)
	return err
}

type AddUsersToRoleParams struct {
	UserID    int32  `json:"user_id"`
	RoleID    int32  `json:"role_id"`
	CreatedBy string `json:"created_by"`
}

const listUserRoles = `-- name: ListUserRoles :many
SELECT r.id, r.name, r.description, r.created_at, r.updated_at, r.created_by, r.updated_by
FROM user_roles ur
INNER JOIN roles r
ON ur.role_id = r.id
WHERE ur.user_id = $1
ORDER BY r.id ASC
`

func (q *Queries) ListUserRoles(ctx context.Context, userID int32) ([]Role, error) {
	rows, err := q.db.Query(ctx, listUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserRole = `-- name: RemoveUserRole :exec
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = $2
`

func (q *Queries) RemoveUserRole(ctx context.Context, userID int32, roleID int32) error {
	_, err := q.db.Exec(ctx, removeUserRole, userID, roleID)
	return err
}

const removeUsersFromRole = `-- name: RemoveUsersFromRole :exec
DELETE FROM user_roles
WHERE user_id = ANY($1::INT4[]) AND role_id = $2
`

func (q *Queries) RemoveUsersFromRole(ctx context.Context, userIds []int32, roleID int32) error {
	_, err := q.db.Exec(ctx, removeUsersFromRole, userIds, roleID)
	return err
}
