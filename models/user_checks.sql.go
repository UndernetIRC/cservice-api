// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_checks.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :many
SELECT email
FROM users
WHERE lower(email) = lower($1)
UNION ALL
SELECT email
FROM pendingusers
WHERE lower(email) = lower($1)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, checkEmailExists, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var email pgtype.Text
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkUsernameExists = `-- name: CheckUsernameExists :many
SELECT user_name
FROM users
WHERE lower(user_name) = lower($1)
UNION ALL
SELECT user_name
FROM pendingusers
WHERE lower(user_name) = lower($1)
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) ([]string, error) {
	rows, err := q.db.Query(ctx, checkUsernameExists, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var user_name string
		if err := rows.Scan(&user_name); err != nil {
			return nil, err
		}
		items = append(items, user_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
