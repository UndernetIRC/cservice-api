// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_keys.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (name, description, key_hash, scopes, ip_restrictions, created_by, created_at, last_updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, description, key_hash, scopes, created_by, created_at, last_used_at, expires_at, last_updated, deleted, ip_restrictions
`

type CreateAPIKeyParams struct {
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
	KeyHash        string      `json:"key_hash"`
	Scopes         []byte      `json:"scopes"`
	IpRestrictions []byte      `json:"ip_restrictions"`
	CreatedBy      int32       `json:"created_by"`
	CreatedAt      int32       `json:"created_at"`
	LastUpdated    int32       `json:"last_updated"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.Name,
		arg.Description,
		arg.KeyHash,
		arg.Scopes,
		arg.IpRestrictions,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.LastUpdated,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.KeyHash,
		&i.Scopes,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.IpRestrictions,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE api_keys
SET deleted = 1, last_updated = $2
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, iD int32, lastUpdated int32) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, iD, lastUpdated)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, name, description, key_hash, scopes, created_by, created_at, last_used_at, expires_at, last_updated, deleted, ip_restrictions FROM api_keys
WHERE id = $1 AND deleted = 0
`

func (q *Queries) GetAPIKey(ctx context.Context, id int32) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.KeyHash,
		&i.Scopes,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.IpRestrictions,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, name, description, key_hash, scopes, created_by, created_at, last_used_at, expires_at, last_updated, deleted, ip_restrictions FROM api_keys
WHERE key_hash = $1 AND deleted = 0
LIMIT 1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.KeyHash,
		&i.Scopes,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.IpRestrictions,
	)
	return i, err
}

const getAPIKeysExpiringSoon = `-- name: GetAPIKeysExpiringSoon :many
SELECT id, name, description, key_hash, scopes, created_by, created_at, last_used_at, expires_at, last_updated, deleted, ip_restrictions FROM api_keys
WHERE deleted = 0
  AND expires_at IS NOT NULL
  AND expires_at > 0
  AND expires_at <= $1
ORDER BY expires_at ASC
`

func (q *Queries) GetAPIKeysExpiringSoon(ctx context.Context, expiresAt pgtype.Int4) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getAPIKeysExpiringSoon, expiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.KeyHash,
			&i.Scopes,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
			&i.LastUpdated,
			&i.Deleted,
			&i.IpRestrictions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, name, description, key_hash, scopes, created_by, created_at, last_used_at, expires_at, last_updated, deleted, ip_restrictions FROM api_keys
WHERE deleted = 0
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.KeyHash,
			&i.Scopes,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
			&i.LastUpdated,
			&i.Deleted,
			&i.IpRestrictions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyIPRestrictions = `-- name: UpdateAPIKeyIPRestrictions :exec
UPDATE api_keys
SET ip_restrictions = $2, last_updated = $3
WHERE id = $1 AND deleted = 0
`

type UpdateAPIKeyIPRestrictionsParams struct {
	ID             int32  `json:"id"`
	IpRestrictions []byte `json:"ip_restrictions"`
	LastUpdated    int32  `json:"last_updated"`
}

func (q *Queries) UpdateAPIKeyIPRestrictions(ctx context.Context, arg UpdateAPIKeyIPRestrictionsParams) error {
	_, err := q.db.Exec(ctx, updateAPIKeyIPRestrictions, arg.ID, arg.IpRestrictions, arg.LastUpdated)
	return err
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys
SET last_used_at = $2
WHERE id = $1 AND deleted = 0
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, iD int32, lastUsedAt pgtype.Int4) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, iD, lastUsedAt)
	return err
}

const updateAPIKeyScopes = `-- name: UpdateAPIKeyScopes :exec
UPDATE api_keys
SET scopes = $2, last_updated = $3
WHERE id = $1 AND deleted = 0
`

type UpdateAPIKeyScopesParams struct {
	ID          int32  `json:"id"`
	Scopes      []byte `json:"scopes"`
	LastUpdated int32  `json:"last_updated"`
}

func (q *Queries) UpdateAPIKeyScopes(ctx context.Context, arg UpdateAPIKeyScopesParams) error {
	_, err := q.db.Exec(ctx, updateAPIKeyScopes, arg.ID, arg.Scopes, arg.LastUpdated)
	return err
}
