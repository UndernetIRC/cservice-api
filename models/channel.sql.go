// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkChannelExists = `-- name: CheckChannelExists :one
SELECT id, name, description, url
FROM channels
WHERE id = $1 AND deleted = 0
`

type CheckChannelExistsRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
}

func (q *Queries) CheckChannelExists(ctx context.Context, id int32) (CheckChannelExistsRow, error) {
	row := q.db.QueryRow(ctx, checkChannelExists, id)
	var i CheckChannelExistsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
	)
	return i, err
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT c.id, c.name, c.description, c.url, c.registered_ts as created_at,
       COUNT(l.user_id) as member_count
FROM channels c
LEFT JOIN levels l ON c.id = l.channel_id AND l.deleted = 0
WHERE c.id = $1
  AND c.deleted = 0
GROUP BY c.id, c.name, c.description, c.url, c.registered_ts
`

type GetChannelByIDRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
	CreatedAt   pgtype.Int4 `json:"created_at"`
	MemberCount int64       `json:"member_count"`
}

func (q *Queries) GetChannelByID(ctx context.Context, id int32) (GetChannelByIDRow, error) {
	row := q.db.QueryRow(ctx, getChannelByID, id)
	var i GetChannelByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.CreatedAt,
		&i.MemberCount,
	)
	return i, err
}

const getChannelDetails = `-- name: GetChannelDetails :one
SELECT c.id, c.name, c.description, c.url, c.registered_ts as created_at, c.last_updated,
       COUNT(l.user_id) as member_count
FROM channels c
LEFT JOIN levels l ON c.id = l.channel_id AND l.deleted = 0
WHERE c.id = $1 AND c.deleted = 0
GROUP BY c.id, c.name, c.description, c.url, c.registered_ts, c.last_updated
`

type GetChannelDetailsRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
	CreatedAt   pgtype.Int4 `json:"created_at"`
	LastUpdated int32       `json:"last_updated"`
	MemberCount int64       `json:"member_count"`
}

func (q *Queries) GetChannelDetails(ctx context.Context, id int32) (GetChannelDetailsRow, error) {
	row := q.db.QueryRow(ctx, getChannelDetails, id)
	var i GetChannelDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.MemberCount,
	)
	return i, err
}

const getChannelUserAccess = `-- name: GetChannelUserAccess :one
SELECT l.access, l.user_id, l.channel_id
FROM levels l
WHERE l.channel_id = $1 AND l.user_id = $2 AND l.deleted = 0
`

type GetChannelUserAccessRow struct {
	Access    int32 `json:"access"`
	UserID    int32 `json:"user_id"`
	ChannelID int32 `json:"channel_id"`
}

func (q *Queries) GetChannelUserAccess(ctx context.Context, channelID int32, userID int32) (GetChannelUserAccessRow, error) {
	row := q.db.QueryRow(ctx, getChannelUserAccess, channelID, userID)
	var i GetChannelUserAccessRow
	err := row.Scan(&i.Access, &i.UserID, &i.ChannelID)
	return i, err
}

const searchChannels = `-- name: SearchChannels :many
SELECT c.id, c.name, c.description, c.url, c.registered_ts as created_at,
       COUNT(l.user_id) as member_count
FROM channels c
LEFT JOIN levels l ON c.id = l.channel_id AND l.deleted = 0
WHERE c.name ILIKE $1
  AND c.deleted = 0
GROUP BY c.id, c.name, c.description, c.url, c.registered_ts
ORDER BY member_count DESC, c.name ASC
LIMIT $2 OFFSET $3
`

type SearchChannelsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchChannelsRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
	CreatedAt   pgtype.Int4 `json:"created_at"`
	MemberCount int64       `json:"member_count"`
}

func (q *Queries) SearchChannels(ctx context.Context, arg SearchChannelsParams) ([]SearchChannelsRow, error) {
	rows, err := q.db.Query(ctx, searchChannels, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchChannelsRow{}
	for rows.Next() {
		var i SearchChannelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.MemberCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchChannelsCount = `-- name: SearchChannelsCount :one
SELECT COUNT(DISTINCT c.id) as total
FROM channels c
WHERE c.name ILIKE $1
  AND c.deleted = 0
`

func (q *Queries) SearchChannelsCount(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, searchChannelsCount, name)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const updateChannelSettings = `-- name: UpdateChannelSettings :one
UPDATE channels
SET description = $2, url = $3, last_updated = EXTRACT(EPOCH FROM NOW())::int
WHERE id = $1 AND deleted = 0
RETURNING id, name, description, url, registered_ts as created_at, last_updated
`

type UpdateChannelSettingsParams struct {
	ID          int32       `json:"id"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
}

type UpdateChannelSettingsRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Url         pgtype.Text `json:"url"`
	CreatedAt   pgtype.Int4 `json:"created_at"`
	LastUpdated int32       `json:"last_updated"`
}

func (q *Queries) UpdateChannelSettings(ctx context.Context, arg UpdateChannelSettingsParams) (UpdateChannelSettingsRow, error) {
	row := q.db.QueryRow(ctx, updateChannelSettings, arg.ID, arg.Description, arg.Url)
	var i UpdateChannelSettingsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
